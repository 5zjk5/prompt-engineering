# coding:utf8
glml4_classification_prompt = """
# 角色设定
你是一个金融领域的专家助手，擅长回答用户咨询问题，问题内容涉及基金/股票/债券/招股书等。

# 任务
根据用户问题，需要你推理判断，一步一步思考，回答这个问题需要哪些关键信息，对这个问题进行分类。

# 类别说明
- sql：获取数据库中数据，根据问题进行sql查询，返回查询结果；例如需要查询基金基本信息，基金股票持仓明细，基金债券持仓明细，基金可转债持仓明细，
    基金日行情表，A股票日行情表，港股票日行情表，A股公司行业划分表，基金规模变动表，基金份额持有人结构，可以归为此类。
- 招股：招股说明书相关的，例如招股意见书，招股意向书等，可以归为此类，用户问题中出现公司名的话需要归为此类，例如"2009年、2010年及2011年，海南双成药业股份有限公司销售费用分别为多少？"。

# 要求
- 选出的类别必须是`sql`或者`招股`，如果你觉得两者都符合，也可以都选择。

# 输出按照以下 json 格式：
`{{'classification': xxx, 'reason': xxx}}`

# 用户问题
```{question}```
"""

glml4_rag_retriver_prompt = """
参考一下信息回答问题：
```
{retriver_res}
```
-----------------------
问题：{question}
"""

system_prompt = """精通SQL语言，理解并解析用户的问题描述，提供高效的转换建议"""

comprehend_db_table_prompt = """
我需要你帮我理解和操作一些SQL数据表。以下是表的详细信息，以字典格式提供。请仔细分析这些信息，并准备好回答关于表结构、数据操作和相关查询的问题。

**表信息：**
是一个 json 格式的，键是表名，值是表对应的列表，里面每一个元素是字段信息，表示字段名及字段类型。
```
{db_structure}
```

**任务：**
1. 请充分理解并描述每个表的结构（包括表名和字段类型）。
2. 如果我需要对数据进行操作，请确保你的回答是基于上述提供的表信息。
"""

plan_prompt = """
**历史对话信息：**
```{message}```
-----------------------------------------------------------------------------------
**参考以下信息，再去执行步骤，如果不为空说明当前规划骤出错过，以下是错误原因分析，避免此次规划时再次错误，为空的话则忽略：**
```{error_reason}```
----------------------------------------------------------------------------------
**可使用工具：**```{tools} ```
-----------------------------------------------------------------------------------
现在你已经了解了所有表信息，结合表信息，结合工具，给你一个问题，你需要一步一步思考，一步一步推理，回答解决这个问题需要哪些步骤。
确保工具一定存在，每一步只能一个工具，不能多个，如果不需要工具可以为空。
如果工具需要执行 SQL 语句的，那先把条件筛选的作为优先步骤，例如`2011年长安基金的涨幅`，步骤1是先选出时间为2011年的数据，后面步骤再去计算。
问题：`{question}`

严格按照以下格式进行回答，不需要输出其他任何多余信息：
[
    {{"step1": "xxxx", "tool": "xxx"}},
    {{"step2": "xxxx", "tool": "xxx"}},
    ...
    {{"stepn": "xxxx", "tool": "xxx"}},
]
"""

re_plan_prompt = """
你给出的回答：
```{plan}```
------------------------------------------------
报错信息：`{error}`
------------------------------------------------
你需要分析仔细一步一步思考，为什么报错了，什么原因导致的？
"""

action_start_prompt = """
现在你已经充分理解了表结构，接下来我会给你一步一步的问题，你根据问题进行一步一步思考推理，结合表结构信息。
"""

step_action_prompt = """
**历史对话信息，你需要参考数据表及字段，还有历史步骤结果：**
```{message}```
-----------------------------------------------------------------------------------
**参考以下信息，再去执行步骤，如果不为空说明当前执行步骤出错过，以下是错误原因分析，避免此次规划时再次错误，为空的话则忽略：**
```{error_reason}```
-----------------------------------------------------------------------------------
执行步骤：`{step_action}`
严格按照以下 JSON 格式进行输出，不需要输出其他任何多余信息：
`{{"reason": "xxx", "sql": "xxx"}}`

**要求：**
- 每一个子查询及最终结果必须使用`DISTINCT`关键字去重。
- 生成查询语句必须符合表结构的字段，即检查每个字段是否在对应的表中有存在，如果不存在重新生成，一定要确保字段存在。
- 生成查询语句的表名必须存在，即检查每个表是否有存在，如果不存在重新生成，一定要确保表存在。
- 生成查询语句不要有语法错误。
- 生成的查询语句，存在表连接，需要检查每一张连接后的表，字段是否存在及对应，如果不存在或不对应重新生成。
- 根据请求一步一步思考查询语句的编写。
- 生成查询语句后，自己一步一步检查是否有语法错误，是否符合表结构的字段及表名。
- 生成的 SQL 语句必须符合 SQLite 语法规范。
- 使用`as`关键字作为变量别名时，一定要使用“"”括起来，例如`SELECT COUNT(*) AS "123涨跌幅超过5%的股票数量"`。
- 不能使用窗口函数。
- 括号对数必须要匹配，不能少括号。
- 生成 SQL 语句需要考虑性能问题，要使生成的语句性能是执行最快的，例如拼接表需要使用左连接`LEFT JOIN`，不能使用内连接`JOIN`。
- 表连接，禁止使用`inner join`。
- 时间日期字段需要使用`datetime()`函数，例如`公告日期 = datetime('2019-04-20')`。
- 如果生成 SQL 语句中的字段名中包含`column`，这是错误的，需要你重新生成。
"""

re_action_prompt = """
你给出的回答：
```{infer_step_res}```
------------------------------------------------
报错信息：`{error}`
------------------------------------------------
检查是否是格式没按照要求输出或者是工具使用错误，或者是其他问题。
1. 例如标点符号是否使用的是英文，sql 语句中的代码标点符号必须是英文。
2. 使用`as`关键字作为变量别名时，一定要使用“"”括起来，例如`SELECT COUNT(*) AS "123涨跌幅超过5%的股票数量"`。
3、 子查询的括号对数是否匹配。
你需要分析仔细一步一步思考，为什么报错了，什么原因导致的，直接给出结论，不需要过多的其他信息。
"""

final_answer_prompt = """
参考 sql 执行的结果回答问题，100字以内，可以根据问题要求灵活调整答案格式，如果执行结果为空表示没有符合要求的结果，不要回答 sql 语句作为答案：
```{sql_res}```
---------------------------------------------
问题：`{question}`
"""

self_reflection_prompt = """
问题：`{question}`
回答：`{answer}`
你需要判断这个回答是否回答出了这个问题，不需要判断回答符不符合实际情况，不需要判断回答合不合理，只需要判断是否回答了问题即可。
如果回答成功输出`是`，回答失败输出`否`，不需要输出其他任何信息，不需要解释任何理由。

以下是例子：
- 问题问的是具体数值，但回答给出非数值作为回答，那回答失败，需要输出`否`,例如：
    * 问：今天有多少交易额？
    * 答：今天有 xxx 交易额
- 当问题的答案是一个具体的数值，那么这样的回答是成功的，需要输出`是`，例如：
    * 问：请查询：在今天有多少只基金成交了。
    * 答：5（仅包含答案数值）
"""
